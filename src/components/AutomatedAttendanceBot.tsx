import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { useToast } from '@/components/ui/use-toast';
import { Input } from '@/components/ui/input';
import { Bot, Clock, Settings, Share2, CheckCircle2, AlertTriangle, Users, Trash2 } from 'lucide-react';
import { getTodayAttendanceSummary } from '@/utils/attendanceUtils';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';

interface BotSettings {
  isEnabled: boolean;
  adminNumbers: string[];
  shareTime: string;
  lastShared: string | null;
  retryAttempts: number;
  notifyOnErrors: boolean;
}

const MAX_RETRY_ATTEMPTS = 3;
const RETRY_DELAY = 5000; // 5 seconds

const AutomatedAttendanceBot: React.FC = () => {
  const [botSettings, setBotSettings] = useState<BotSettings>({
    isEnabled: false,
    adminNumbers: ['94768231675'], // Super admin number
    shareTime: '18:00',
    lastShared: null,
    retryAttempts: 0,
    notifyOnErrors: true
  });
  const [isProcessing, setIsProcessing] = useState(false);
  const [newAdminNumber, setNewAdminNumber] = useState('');
  const { toast } = useToast();

  // Function to validate WhatsApp number
  const validateWhatsAppNumber = (number: string): string => {
    let cleaned = number.replace(/\D/g, '');
    if (!cleaned.startsWith('94')) {
      cleaned = '94' + cleaned;
    }
    return cleaned.length >= 11 ? cleaned : '';
  };

  // Function to generate detailed attendance summary with improved error handling
  const generateDetailedSummary = async () => {
    try {
      const summary = await getTodayAttendanceSummary();
      const dateStr = new Date().toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });

      // Ensure we have valid data with fallbacks
      const safeData = {
        totalEmployees: summary.totalEmployees || 0,
        presentCount: summary.presentCount || 0,
        lateCount: summary.lateCount || 0,
        absentCount: summary.absentCount || 0,
        checkedOutCount: summary.checkedOutCount || 0,
        presentRate: summary.presentRate || summary.totalPresentRate || '0.0',
        lateRate: summary.lateRate || '0.0',
        absentRate: summary.absentRate || '0.0'
      };

      return `*Dutch Trails Report*\n` +
        `───────────────────\n` +
        `📅 Date: ${dateStr}\n` +
        `🤖 Generated by: Dutch Attendance BOT\n` +
        `───────────────────\n\n` +
        `📊 *ATTENDANCE SUMMARY*\n` +
        `• Total Staff: ${safeData.totalEmployees}\n` +
        `• Present: ${safeData.presentCount} ✅\n` +
        `• Late Arrivals: ${safeData.lateCount} ⏰\n` +
        `• Absent: ${safeData.absentCount} ❌\n` +
        `• Early Departures: ${safeData.checkedOutCount} 🏃\n\n` +
        `📈 *PERFORMANCE METRICS*\n` +
        `• Attendance Rate: ${safeData.presentRate}%\n` +
        `• Punctuality Rate: ${(100 - Number(safeData.lateRate)).toFixed(1)}%\n` +
        `• Absence Rate: ${safeData.absentRate}%\n\n` +
        `⚠️ *ATTENTION REQUIRED*\n` +
        `${safeData.lateCount > 0 ? `• Late Arrivals: ${safeData.lateCount} staff\n` : ''}` +
        `${safeData.absentCount > 0 ? `• Unplanned Absences: ${safeData.absentCount} staff\n` : ''}` +
        `${safeData.checkedOutCount > 0 ? `• Early Departures: ${safeData.checkedOutCount} staff\n` : ''}` +
        `\nThis is an automated message from Dutch Attendance BOT.\n` +
        `Time: ${new Date().toLocaleTimeString()}\n` +
        `───────────────────`;
    } catch (error) {
      console.error('Error generating summary:', error);
      
      // Return a fallback message if data loading fails
      const dateStr = new Date().toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
      
      return `*Dutch Trails Report*\n` +
        `───────────────────\n` +
        `📅 Date: ${dateStr}\n` +
        `🤖 Generated by: Dutch Attendance BOT\n` +
        `───────────────────\n\n` +
        `⚠️ *ERROR*\n` +
        `Unable to load attendance data. Please check manually.\n` +
        `\nTime: ${new Date().toLocaleTimeString()}\n` +
        `───────────────────`;
    }
  };

  // Function to send message via WhatsApp BOT with retry logic
  const sendViaBotAPI = async (message: string, retryCount = 0): Promise<boolean> => {
    try {
      if (!botSettings.adminNumbers.length) {
        throw new Error('No admin numbers configured');
      }

      const promises = botSettings.adminNumbers.map(async (number) => {
        const validNumber = validateWhatsAppNumber(number);
        if (!validNumber) return false;

        const url = `https://wa.me/${validNumber}?text=${encodeURIComponent(message)}`;
        window.open(url, '_blank');
        return true;
      });

      const results = await Promise.all(promises);
      const successCount = results.filter(Boolean).length;

      if (successCount === 0) {
        throw new Error('Failed to send to any admin');
      }

      setBotSettings(prev => ({
        ...prev,
        lastShared: new Date().toISOString(),
        retryAttempts: 0
      }));

      toast({
        title: 'Success',
        description: `Attendance summary sent to ${successCount} admin${successCount > 1 ? 's' : ''}`,
      });

      return true;
    } catch (error) {
      console.error('Bot API Error:', error);
      
      if (retryCount < MAX_RETRY_ATTEMPTS) {
        toast({
          title: 'Retrying',
          description: `Attempt ${retryCount + 1} of ${MAX_RETRY_ATTEMPTS}...`,
        });
        
        await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
        return sendViaBotAPI(message, retryCount + 1);
      }

      if (botSettings.notifyOnErrors) {
        toast({
          title: 'Error',
          description: 'Failed to send summary after multiple attempts',
          variant: 'destructive'
        });
      }

      return false;
    }
  };

  // Function to handle manual share
  const handleManualShare = async () => {
    setIsProcessing(true);
    try {
      const summary = await generateDetailedSummary();
      await sendViaBotAPI(summary);
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to generate and share summary',
        variant: 'destructive'
      });
    } finally {
      setIsProcessing(false);
    }
  };

  // Function to add admin number
  const handleAddAdmin = () => {
    const validNumber = validateWhatsAppNumber(newAdminNumber);
    if (!validNumber) {
      toast({
        title: 'Invalid Number',
        description: 'Please enter a valid WhatsApp number',
        variant: 'destructive'
      });
      return;
    }

    if (botSettings.adminNumbers.includes(validNumber)) {
      toast({
        title: 'Duplicate Number',
        description: 'This number is already in the admin list',
        variant: 'destructive'
      });
      return;
    }

    setBotSettings(prev => ({
      ...prev,
      adminNumbers: [...prev.adminNumbers, validNumber]
    }));
    setNewAdminNumber('');
    
    toast({
      title: 'Admin Added',
      description: 'New admin number has been added successfully'
    });
  };

  // Function to remove admin number
  const handleRemoveAdmin = (number: string) => {
    // Prevent removal of super admin number
    if (number === '94768231675') {
      toast({
        title: 'Cannot Remove',
        description: 'Super admin number cannot be removed',
        variant: 'destructive'
      });
      return;
    }

    setBotSettings(prev => ({
      ...prev,
      adminNumbers: prev.adminNumbers.filter(n => n !== number)
    }));
    
    toast({
      title: 'Admin Removed',
      description: 'Admin number has been removed successfully'
    });
  };

  // Auto-share check interval
  useEffect(() => {
    if (!botSettings.isEnabled) return;

    const checkAndShare = async () => {
      try {
        const now = new Date();
        const [hour, minute] = botSettings.shareTime.split(':').map(Number);
        
        if (now.getHours() === hour && now.getMinutes() === minute) {
          const lastShared = botSettings.lastShared ? new Date(botSettings.lastShared) : null;
          
          // Check if we haven't shared today
          if (!lastShared || lastShared.getDate() !== now.getDate()) {
            setIsProcessing(true);
            try {
              const summary = await generateDetailedSummary();
              await sendViaBotAPI(summary);
            } catch (error) {
              console.error('Error in auto-share:', error);
              // Continue execution even if auto-share fails
            } finally {
              setIsProcessing(false);
            }
          }
        }
      } catch (error) {
        console.error('Error in checkAndShare:', error);
        setIsProcessing(false);
      }
    };

    const interval = setInterval(checkAndShare, 60000); // Check every minute
    return () => clearInterval(interval);
  }, [botSettings.isEnabled, botSettings.shareTime, botSettings.lastShared]);

  return (
    <Card className="w-full bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-900/40 dark:to-purple-900/40">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Bot className="h-5 w-5 text-purple-600" />
          Dutch Trails BOT
        </CardTitle>
        <CardDescription>
          Automated attendance reporting via WhatsApp BOT
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Bot Status */}
        <div className="flex items-center justify-between p-4 bg-white/50 dark:bg-black/20 rounded-lg">
          <div className="flex items-center gap-2">
            <Bot className={`h-5 w-5 ${botSettings.isEnabled ? 'text-green-500' : 'text-gray-400'}`} />
            <span>BOT Status</span>
          </div>
          <Switch
            checked={botSettings.isEnabled}
            onCheckedChange={(checked) => setBotSettings(prev => ({ ...prev, isEnabled: checked }))}
          />
        </div>

        {/* Admin Numbers Management */}
        <Dialog>
          <DialogTrigger asChild>
            <Button variant="outline" className="w-full">
              <Users className="mr-2 h-4 w-4" />
              Manage Admins ({botSettings.adminNumbers.length})
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-md">
            <DialogHeader>
              <DialogTitle>Manage Admin Numbers</DialogTitle>
              <DialogDescription>
                Add or remove WhatsApp numbers for automated reports
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4">
              <div className="flex gap-2">
                <Input
                  placeholder="Enter WhatsApp number"
                  value={newAdminNumber}
                  onChange={(e) => setNewAdminNumber(e.target.value)}
                />
                <Button onClick={handleAddAdmin}>Add</Button>
              </div>
              <ScrollArea className="h-[200px] w-full rounded-md border p-4">
                {botSettings.adminNumbers.map((number) => (
                  <div key={number} className="flex items-center justify-between py-2">
                    <Badge variant={number === '94768231675' ? 'default' : 'secondary'}>
                      {number === '94768231675' ? 'Super Admin: ' : ''}{number}
                    </Badge>
                    {number !== '94768231675' && (
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleRemoveAdmin(number)}
                      >
                        <Trash2 className="h-4 w-4 text-red-500" />
                      </Button>
                    )}
                  </div>
                ))}
              </ScrollArea>
            </div>
          </DialogContent>
        </Dialog>

        {/* Share Time Setting */}
        <div className="space-y-2">
          <Label>Auto-Share Time</Label>
          <div className="flex items-center gap-2">
            <Clock className="h-4 w-4 text-purple-600" />
            <Input
              type="time"
              value={botSettings.shareTime}
              onChange={(e) => setBotSettings(prev => ({ ...prev, shareTime: e.target.value }))}
              className="bg-white/80 dark:bg-black/20"
            />
          </div>
        </div>

        {/* Error Notification Setting */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <AlertTriangle className="h-4 w-4 text-yellow-500" />
            <span>Notify on Errors</span>
          </div>
          <Switch
            checked={botSettings.notifyOnErrors}
            onCheckedChange={(checked) => setBotSettings(prev => ({ ...prev, notifyOnErrors: checked }))}
          />
        </div>

        {/* Manual Share Button */}
        <Button
          onClick={handleManualShare}
          disabled={isProcessing || botSettings.adminNumbers.length === 0}
          className="w-full bg-purple-600 hover:bg-purple-700"
        >
          {isProcessing ? (
            <>
              <Clock className="mr-2 h-4 w-4 animate-spin" />
              Processing...
            </>
          ) : (
            <>
              <Share2 className="mr-2 h-4 w-4" />
              Share Now via BOT
            </>
          )}
        </Button>

        {/* Last Shared Status */}
        {botSettings.lastShared && (
          <div className="flex items-center gap-2 text-sm text-gray-500">
            <CheckCircle2 className="h-4 w-4 text-green-500" />
            Last shared: {new Date(botSettings.lastShared).toLocaleString()}
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default AutomatedAttendanceBot; 